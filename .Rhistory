install.packages("FNN")
# run on windows
# setwd("D:/workspace/UFRN/R")
# setwd("C:/Users/Arthur/Documents/andre/tcc")
# run on linux
setwd("~/Workspace/ufrn/tcc")
source("scripts/src/Functions.R")
source("scripts/src/Imports.R")
#' Imports packages and sets dataframes locations and names
installNeededPackages()
classifiers_names <- c("J48", "IBk", "JRip")
classifier_results <- getFileNames(
path_to_look = df_locations[3],
pattern = classifiers_names[1]
)
classifier_results
mes(
path_to_look = df_locations[3],
pattern = classifiers_names[2]
)
classifier_results <- getFileNames(
path_to_look = df_locations[3],
pattern = classifiers_names[2]
)
classifier_results
classifier_results <- getFileNames(
path_to_look = df_locations[3],
pattern = classifiers_names[3]
)
classifier_results
x <- readFromCsv(df_locations[3], "JRip_2Year")
View(x)
classifier_results
classifier_results[-length(classifier_results)]
y <- readFromCsv(df_locations[3], "JRip_3Year")
z <- cbind(t(x[2,]), t(y))
rownames(z) <- x[1,]
z <- x
z <- appendRowIntoDataframe(z, y)
View(z)
View(y)
classifier_results[1]
substr(classifier_results[1], length(classifier_results[1])-4, length(classifier_results[1]))
length(classifier_results[1])
a <- classifier_results[1]
length(a)
classifier_results[1]
substr(classifier_results[1], 11, 13)
substr(classifier_results[1], 11, 14)
classifier_results[1]
strsplit(classifier_results[1], ".")
nchar(classifier_results[1])
substr(classifier_results[1], 1, nchar(classifier_results[1])-4)
debugSource('~/Workspace/ufrn/tcc/scripts/src/FixDataset.R', echo=TRUE)
debugSource('~/Workspace/ufrn/tcc/scripts/src/FixDataset.R', echo=TRUE)
debugSource('~/Workspace/ufrn/tcc/scripts/src/FixDataset.R', echo=TRUE)
classifier_results
classifier_results[-length(classifier_results)]
classifier_results[-1, length(classifier_results)]
classifier_results[-length(classifier_results)]
substr(j, 1, nchar(j)-4)
readFromCsv(
df.location = df_locations[3],
df.name = substr(j, 1, nchar(j)-4)
)
classifier_results
classifier_results[-length(classifier_results)]
classifier_results[-c(1, length(classifier_results))]
debugSource('~/Workspace/ufrn/tcc/scripts/src/FixDataset.R', echo=TRUE)
View(current_classifier_results)
source('~/Workspace/ufrn/tcc/scripts/Main.R', echo=TRUE)
View(current_result)
View(current_result)
colnames(current_result)
colnames(current_result)[5]
colnames(current_result)[6]
colnames(current_result)[10]
colnames(current_result)[9]
head(current_result$colnames(current_result)[6])
head(current_result$6
head(current_result[[6]])
{
classifier_results <- getFileNames(
path_to_look = df_locations[3],
pattern = i
)
for(j in classifier_results[-length(classifier_results)])
{
current_result <- readFromCsv(
df.location = df_locations[3],
df.name = substr(j, 1, nchar(j) - 4)
)
}
}
{
classifier_results <- getFileNames(
path_to_look = df_locations[3],
pattern = i
)
for(j in classifier_results[-length(classifier_results)])
{
current_result <- readFromCsv(
df.location = df_locations[3],
df.name = substr(j, 1, nchar(j) - 4)
)
rm(current_result)
}
rm(classifier_results)
}
{
classifier_results <- getFileNames(
path_to_look = df_locations[3],
pattern = i
)
for(j in classifier_results[-length(classifier_results)])
{
current_result <- readFromCsv(
df.location = df_locations[3],
df.name = substr(j, 1, nchar(j) - 4)
)
rm(current_result)
}
rm(j)
rm(classifier_results)
}
rm(i)
source("scripts/src/Functions.R")
source('~/Workspace/ufrn/tcc/scripts/Main.R', echo=TRUE)
example <- readFromCsv(df_locations[3], "JRip_2Year")
y <- example[1,]
View(y)
y <- example[1,c(6:9)]
View(y)
findMean(y)
mean(y)
mean(y[1,])
y <- as.vector(y)
y <- as.array(y)
View(y)
df_return <- example[,1:5]
View(df_return)
rm(df_return)
List(c(6:9))
List()
list()
list(c(6:9))
list(c(6:9),c(10:13))
list(c(6:9), c(10:13), c(14:17), c(18:21))
for(j in knn_techniques_cols)
{
}
knn_techniques_cols <- list(c(6:9), c(10:13), c(14:17), c(18:21))
for(j in knn_techniques_cols)
{
}
j
for(j in 1:length(knn_techniques_cols))
{
}
mean(example[1, c(knn_techniques_cols[[1]])])
}
mean(example[1, c(knn_techniques_cols[[1]])])
c(knn_techniques_cols[[1]]
)
example[1, c(knn_techniques_cols[[1]])
]
as.vector(example[1, c(knn_techniques_cols[[1]])])
as.numeric(example[1, c(knn_techniques_cols[[1]])])
mean(as.numeric(example[1, c(knn_techniques_cols[[1]])]))
mean(as.array(example[1, c(knn_techniques_cols[[1]])]))
as.array(example[1, c(knn_techniques_cols[[1]])])
mean(as.numeric(example[1, c(knn_techniques_cols[[1]])]))
unlist(example[1, c(knn_techniques_cols[[1]])])
(unname(unlist(example[1, c(knn_techniques_cols[[1]])])))
mean(unname(unlist(example[1, c(knn_techniques_cols[[1]])])))
df_return <- df_original[, 1:9]
df_return <- example[, 1:9]
View(df_return)
rm(y, df_return)
debugSource('~/Workspace/ufrn/tcc/scripts/src/FixDataset.R', echo=TRUE)
# run on windows
# setwd("D:/workspace/UFRN/R")
# setwd("C:/Users/Arthur/Documents/andre/tcc")
# run on linux
setwd("~/Workspace/ufrn/tcc")
source("scripts/src/Functions.R")
source("scripts/src/Imports.R")
debugSource('~/Workspace/ufrn/tcc/scripts/src/FixDataset.R', echo=TRUE)
View(df_return)
View(df_return)
View(df_return)
View(df_return)
View(current_result)
colnames(current_result)[1:5]
debugSource('~/Workspace/ufrn/tcc/scripts/src/FixDataset.R', echo=TRUE)
View(current_result)
source('~/Workspace/ufrn/tcc/scripts/Main.R', echo=TRUE)
x <- example[,1]
x <- example[[1]]
df_return <- example[,1:2]
View(df_return)
df_return <- dropColumnFromDataFrame(df_original, 1)
df_return <- dropColumnFromDataFrame(df_return, 1)
x <- cbind(x,x)
View(x)
df_return
# run on windows
# setwd("D:/workspace/UFRN/R")
# setwd("C:/Users/Arthur/Documents/andre/tcc")
# run on linux
setwd("~/Workspace/ufrn/tcc")
source("scripts/src/Functions.R")
source("scripts/src/Imports.R")
debugSource('~/Workspace/ufrn/tcc/scripts/src/FixDataset.R', echo=TRUE)
View(current_result)
View(dataset_col)
View(df_return)
View(df_return)
debugSource('~/Workspace/ufrn/tcc/scripts/src/FixDataset.R', echo=TRUE)
debugSource('~/Workspace/ufrn/tcc/scripts/src/FixDataset.R', echo=TRUE)
View(df_return)
# run on windows
# setwd("D:/workspace/UFRN/R")
# setwd("C:/Users/Arthur/Documents/andre/tcc")
# run on linux
setwd("~/Workspace/ufrn/tcc")
source("scripts/src/Functions.R")
source("scripts/src/Imports.R")
debugSource('~/Workspace/ufrn/tcc/scripts/src/FixDataset.R', echo=TRUE)
View(df_return)
View(df_return)
View(df_return)
View(current_result)
# run on windows
# setwd("D:/workspace/UFRN/R")
# setwd("C:/Users/Arthur/Documents/andre/tcc")
# run on linux
setwd("~/Workspace/ufrn/tcc")
source("scripts/src/Functions.R")
source("scripts/src/Imports.R")
#' Imports packages and sets dataframes locations and names
installNeededPackages()
# run on windows
# setwd("D:/workspace/UFRN/R")
# setwd("C:/Users/Arthur/Documents/andre/tcc")
# run on linux
setwd("~/Workspace/ufrn/tcc")
source("scripts/src/Functions.R")
source("scripts/src/Imports.R")
#' Imports packages and sets dataframes locations and names
installNeededPackages()
# run on windows
# setwd("D:/workspace/UFRN/R")
# setwd("C:/Users/Arthur/Documents/andre/tcc")
# run on linux
setwd("~/Workspace/ufrn/tcc")
source("scripts/src/Functions.R")
source("scripts/src/Imports.R")
#' Imports packages and sets dataframes locations and names
installNeededPackages()
#' Imports packages and sets dataframes locations and names
installNeededPackages()
#' Imports packages and sets dataframes locations and names
installNeededPackages()
#' Imports packages and sets dataframes locations and names
installNeededPackages()
#' Imports packages and sets dataframes locations and names
installNeededPackages()
source('~/Workspace/ufrn/tcc/scripts/src/RunStatisticalAnalisys.R', echo=TRUE)
View(current_classifier_results)
source('~/Workspace/ufrn/tcc/scripts/src/RunStatisticalAnalisys.R', echo=TRUE)
View(current_classifier_results)
posthoc.friedman.conover.test(current_classifier_results)
colnames(current_classifier_results)
current_classifier_results
posthoc.friedman.conover.test(as.matrix(current_classifier_results))
posthoc.friedman.nemenyi.test(as.matrix(current_classifier_results))
summary(posthoc.friedman.nemenyi.test(as.matrix(current_classifier_results)))
